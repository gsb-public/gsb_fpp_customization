<?php

include_once 'gsb_fpp_customization.features.inc';

/**
 * Implements hook_views_default_views_alter()
 * This adds the 'FPP ID' column to the 'fieldable_pane_entities' listing view.
 */
function gsb_fpp_customization_views_default_views_alter(&$views) {

  // Get the display options section of the view
  $display_options = &$views['fieldable_pane_entities']->display['default']->display_options;

  // Create the 'fpid' field 
  $fpid_field = array(
    'id' => 'fpid',
    'table' => 'fieldable_panels_panes',
    'field' => 'fpid',
    'label' => 'FPP ID',
    'element_label_colon' => FALSE,
    'separator' => '',
  );

  // Put the 'fpid' field after the title field

  $index = array_search('title', array_keys($display_options['fields']));

  $part1 = array_slice($display_options['fields'], $index, $index+1);
  $part2 = array_slice($display_options['fields'], $index+1);

  $display_options['fields'] = array_merge($part1, array('fpid' => $fpid_field), $part2);

  // make the 'fpid' sortable and right aligned
  $display_options['style_options']['info']['fpid'] = array(
    'sortable' => 1,
    'default_sort_order' => 'asc',
    'align' => 'views-align-right',
    'separator' => '',
    'empty_column' => 0,
  );

}

/**
 * Implements hook_library()
 *
 * This adds the superfish flyout menu js for the 'Add Content' IPE modal popup.
 *
 */
function gsb_fpp_customization_library() {

  // Adding superfish library

  $libraries['superfish'] = array(
    'title' => 'Superfish',
    'website' => 'https://github.com/joeldbirch/superfish',
    'version' => '1.7.3',
    'js' => array(
      drupal_get_path('profile', 'gsb_public') . '/libraries/superfish/dist/js/hoverIntent.js' => array(),
      drupal_get_path('profile', 'gsb_public') . '/libraries/superfish/dist/js/superfish.js' => array(),
    ),
    'css' => array(
      drupal_get_path('profile', 'gsb_public') . '/libraries/superfish/dist/css/superfish.css' => array(),
      drupal_get_path('profile', 'gsb_public') . '/libraries/superfish/dist/css/superfish-vertical.css' => array(),
    ),
  );

  // Adding gsb_fpp_customization js

  $libraries['gsb_fpp_customization'] = array(
    'title' => 'GSB Fpp Customization',
    'website' => 'https://github.com/gsbitse/gsb_fpp_customization',
    'version' => '',
    'js' => array(
      drupal_get_path('module', 'gsb_fpp_customization') . '/js/gsb_fpp_customization.js' => array(),
    ),
    'dependencies' => array(
      array('gsb_fpp_customization', 'superfish'),
    ),
  );

  return $libraries;
}

/**
 * Implementation of hook_ctools_content_subtype_alter()
 */
function gsb_fpp_customization_ctools_content_subtype_alter(&$subtype, &$plugin) {

  $category_label  = (is_string($subtype['category'])) ? $subtype['category'] : $subtype['category'][0];

  // Switch the labeling of "Miscellaneous" to "Blocks"
  if ($category_label == 'Miscellaneous') {
    $subtype['category'] = 'Blocks';
  }

  // Move all fielded panes to root.
  if ($subtype['category'] == 'Fielded panes') {
    $subtype['category'] = 'root';
  }

}

/**
 * Implements hook_form_FORM_ID_alter()
 *
 * This adds the 'back' and 'cancel' links to the edit form for block panes.
 *
 */
function gsb_fpp_customization_form_ctools_block_content_type_edit_form_alter(&$form, &$form_state, $form_id) {
  // Customize the title of the modal
  _gsb_fpp_customization_customize_modal_title('block', $form, $form_state, $form_id);  

  // Alter the add_content_modal forms...
  _gsb_fpp_customization_add_content_form_alter($form, $form_state, $form_id);

}

/**
 * Implements hook_form_FORM_ID_alter()
 *
 * This adds the 'back' and 'cancel' links to the edit form for view panes.
 *
 */
function gsb_fpp_customization_form_views_content_views_panes_content_type_edit_form_alter(&$form, &$form_state, $form_id) {

  // Customize the fields
  _gsb_fpp_customization_customize_content_pane_fields($form, $form_state, $form_id);

  // Customize the title of the modal
  _gsb_fpp_customization_customize_modal_title('view', $form, $form_state, $form_id);

  // Alter the add_content_modal forms...
  _gsb_fpp_customization_add_content_form_alter($form, $form_state, $form_id);

}

/**
 * Implements hook_form_FORM_ID_alter()
 *
 * This adds the 'back' and 'cancel' links to the edit form for fpp panes. It
 * also customizes fields related to reusable properties.
 *
 */
function gsb_fpp_customization_form_fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form_alter(&$form, &$form_state, $form_id) {

  // Customize the title of the modal
  _gsb_fpp_customization_customize_modal_title('fpp', $form, $form_state, $form_id);  

  // Customize the 'reusable' portion of the fpp form
  _gsb_fpp_customization_customize_reusable_form($form, $form_state, $form_id);

  // Alter the add_content_modal forms...
  _gsb_fpp_customization_add_content_form_alter($form, $form_state, $form_id);

}

/**
 * Customize the fields on content panes.
 */
function _gsb_fpp_customization_customize_content_pane_fields(&$form, &$form_state, $form_id) {

  // Widget Title
  if (!empty($form['override_title'])) {
    // Adjust the title
    $form['override_title_text']['#field_prefix'] = '<label for="override-title-textfield">' . t('Title') . '</label>';

    // Set the default value of the checkbox to true and hide the checkbox.
    $form['override_title']['#access'] = FALSE;
    $form['override_title']['#default_value'] = TRUE;

    // Hide the help text.
    $form['override_title_markup']['#access'] = FALSE;
  }

  // Items Per Page
  if (!empty($form['items_per_page'])) {
    $form['items_per_page']['#title'] = t('Items to Show');
  }

  // More Link
  if (!empty($form['more_link'])) {
    $form['more_link']['#title'] = t('Provide a link to') . ' ' . $form_state['view']->display_handler->options['use_more_text'];
    unset($form['more_link']['#description']);
  }

  // Fields Selector
  if (!empty($form['fields_override'])) {
    $form['fields_override']['#title'] = t('Fields to Display');
    $form['fields_override']['#collapsible'] = FALSE;
  }

  // Exposed filters
  if (!empty($form['exposed']) && count(element_children($form['exposed'])) > 0) {
    $form['exposed']['#type'] = 'fieldset';
    $form['exposed']['#title'] = t('Filters');
    $form['exposed']['#attributes'] = array('class' => array('general-settings-fieldset'));
  }

  // Order the fields.
  $field_order = array(
    'override_title_text',
    'items_per_page',
    'more_link',
    'fields_override',
    'exposed',
  );

  foreach ($field_order as $index => $field) {
    $form[$field]['#weight'] = $index - 100;
  }
}

/**
 *
 * Customize the title of the modal
 *
 */
function _gsb_fpp_customization_customize_modal_title($type, &$form, &$form_state, $form_id) {

  if ($type == 'block') {

    $block_name = $form_state['subtype_name'];
    $title = $form_state['subtype']['title'];

    $form_state['title'] = $title . ' (block:' . $block_name . ')';     

  } else if ($type == 'view') {

    if (isset($form_state['view'])) {
      $title = $form_state['subtype']['title'];
      $view_name = $form_state['view']->name;
      $form_state['title'] = $title . ' (view:' . $view_name . ')'; 
    }

  } else if ($type == 'fpp') {

    if (isset($form['#entity'])) {
      $bundle = $form['#entity']->bundle;
      $fpp_id = !empty($form['#entity']->fpid) ? $form['#entity']->fpid : '';
      $title = 'Edit ' . $form['#entity']->admin_title . ' (' . $bundle . ':fpp_id:' . $fpp_id . ')';
      $form_state['title'] = $title; 
    }

  }

}  

/**
 *
 * Customize the 'reusable' portion of the fpp form
 *
 * 1. Change the 'Category' select option to be the workbench sections the user
 *    has access to.
 * 2. Change the 'Category' select title to be 'Sections'.
 * 3. If there are no sections then hide all of the reusable related fields.
 * 4. Change the 'view mode' for the fpp.
 * 5. Make some other small adjustments to the fpp form.
 * 6. Set a validation function.
 *
 */
function _gsb_fpp_customization_customize_reusable_form(&$form, &$form_state, $form_id) {

  global $user;

  // only show the pane categories (sections) the user has workbench access to
  workbench_access_user_load_data($user);
  $active = workbench_access_get_active_tree();
  $account_access = array_keys($user->workbench_access);

  $categories = array();

  foreach ($account_access as $key => $value) {
    if (isset($active['tree'][$value])) {
      $category = $active['tree'][$value]['name'];
      $categories[$category] = $category;
    }
  }
  
  // allow each module add their own categories (sections)
  drupal_alter('gsb_fpp_customization_add_category', $form, $categories);

  // sort the categories
  asort($categories);

  // adjust the visibility of reusable checkbox
  if (!empty($categories) && isset($form['reusable'])) {
    if (isset($form_state['entity']) && !empty($form_state['entity']->category)) {
      $form['reusable']['category']['#default_value'] = $form_state['entity']->category;
    }

    $form['reusable']['category']['#type'] = 'select';
    $form['reusable']['category']['#options'] = $categories;

    $form['reusable']['category']['#title'] = t('Section');
    $form['reusable']['category']['#description'] = t('The section this content will appear in the "Add content" modal.');
  }
  else {
    $form['reusable']['#access'] = FALSE;
  }

  // Hide reusable checkbox in case it was once marked as reusable.
  if ($form_state['entity']->reusable) {
    $form['reusable']['reusable']['#access'] = FALSE;
  }

  $form['reusable']['reusable']['#weight'] = -2;
  $form['reusable']['reusable']['#suffix'] = t('Once an item is made reusable it can\'t be undone.');

  $form['reusable']['warning']['#weight'] = -1;

  // adjust the view_mode for the fpp
  list($panels_module, $type) = explode(':', $form_state['display']->cache_key);

  $form['view_mode']['#type'] = 'value';
  $form['view_mode']['#value'] = 'full';

  if (isset($form['#bundle']) &&
      $form['#bundle'] == 'existing_node' &&
      $panels_module == 'panels_mini' &&
      in_array($type, array('business_insights', 'faculty_research', 'our_programs', 'the_stanford_gsb_experience'))) {
    $form['view_mode']['#value'] = 'megamenu';
  }

  // hide the title field
  // except when we are editing the accordion fpp
  if ($form['#bundle'] != 'accordion') {
    $form['title']['#access'] = FALSE;
  }

  // hide the 'make title a link' field
  $form['link']['#access'] = FALSE;

  // hide the revision field and...
  // set the value to always be false
  $form['revision']['#access'] = FALSE;
  $form['revision']['revision']['#value'] = 0;

  // set a validation function
  $form['#validate'][] = 'gsb_fpp_customization_fpp_edit_form_validate';

}

/**
 *
 * Alter the add_content_modal forms...
 *
 * 1. add 'back' and 'cancel' links to the form
 * 2. remove/hide the override title fields if the form is for 'Blocks' (Preformatted CTAs)
 *
 */
function _gsb_fpp_customization_add_content_form_alter(&$form, &$form_state, $form_id) {

  drupal_add_library('gsb_fpp_customization', 'gsb_fpp_customization');

  // add back link
  $form['back_link'] = array(
    '#type' => 'link',
    '#title' => t('Back to Add Content'),
    '#href' => '',
    '#weight' => -99,
    '#id' => 'back-link',
    '#options' => array(
      'fragment' => 'back-link',
    ),
  );

  // remove/hide the override title fields if the form is for 'Blocks' (Preformatted CTAs)
  if (isset($form_state['subtype']['category']) && $form_state['subtype']['category'] == 'Blocks') {
    $form['override_title']['#access'] = FALSE;
    $form['override_title_markup']['#access'] = FALSE;
    $form['override_title_text']['#access'] = FALSE;
  }
}

/**
 *
 * Validate the fpp edit form
 *
 * If the reusable option is checked, then make the 'Element Title' field required.
 * This will ensure that all reusable fpps will be listed by their title in the drupal
 * admin fpp pages.
 *
 */
function gsb_fpp_customization_fpp_edit_form_validate(&$form, &$form_state) {
  if (isset($form_state['values']['reusable']) && $form_state['values']['reusable'] == 1) {
    $admin_title = $form_state['values']['admin_title'];
    if (empty($admin_title)) {
      form_set_error('admin_title','Element Title field is required.');
    }
  }
}

/**
 * Process the panels add content modal to...
 *
 * Replace the default header (boring) with a list all the content links,
 * on the first page of the panels Add Content modal popup. This page will be
 * displayed under a tab called 'Panels Home'.
 *
 * We are also adding another new vertical tab titled 'Stock Content' that will
 * contain any shared fpps. Shared FPPs have a category of 'stock-content', and
 * are created by selecting 'Stock Content' for the reusable 'Sections' property.
 *
 */
function gsb_fpp_customization_process_panels_add_content_modal(&$vars) {

  global $user;

  $vars['first_page_links'] = array();
  $vars['first_page'] = FALSE;

  if ($vars['category'] == null || $vars['category'] == 'root') {

    $vars['first_page'] = TRUE;
    unset($vars['header']);

    foreach($vars['categories'] as $category => $value) {
      if ($category == 'root') {
        continue;
      }
      $category_title = '';
      if (isset($value['title'])) {
        $category_title = $value['title'];
      }
      if ($category == 'other') {
        // only display the 'other' category if the user has the admin or marketing_admin role
        $other_access = FALSE;
        if (in_array('administrator', array_values($user->roles))) {
          $other_access = TRUE;
        }
        if (in_array('marketing_admin', array_values($user->roles))) {
          $other_access = TRUE;
        }
        if (!$other_access) {
          continue;
        }
      }

      if (isset($vars['categories'][$category]['content'])) {  

        // sort the content by their keys (titles) within each category
        ksort($vars['categories'][$category]['content']);

        foreach($vars['categories'][$category]['content'] as $content) {
          $vars['first_page_links'][$category_title][] = array(
            'link' => theme('panels_add_content_link', array(
                        'renderer' => $vars['renderer'],
                        'region' => $vars['region'],
                        'first_page' => $vars['first_page'],
                        'content_type' => $content
                      )),
          );
        }

      }

    }

  }

  $vars['stock_content_page_links'] = array();
  $vars['stock_content_page'] = FALSE;

  if ($vars['category'] == 'stock-content') {

    $vars['stock_content_page'] = TRUE;
    unset($vars['header']);

    $vars['column_count'] = 0;
    unset($vars['columns']);

    foreach($vars['categories'] as $category => $value) {

      if ($category != 'stock-content') {
        continue;
      }
      
      // sort the content by their keys (titles) within the 'stock content' category
      ksort($vars['categories'][$category]['content']);

      foreach($vars['categories'][$category]['content'] as $content) {

        $entity_id = $content['entity_id'];

        // get the uuid of the item
        // the entity_id should look something like this... 'uuid:bf7f85ab-ebdf-4f77-9782-25bf0eda19ad'
        list($part1, $uuid) = explode(":", $entity_id);
        
        $entity = _gsb_fpp_customization_get_fpp_entity_by_uuid($uuid);

        $category_title = _gsb_fpp_customization_get_title_by_bundle_name($entity->bundle);

        $vars['stock_content_page_links'][$category_title][] = array(
          'link' => theme('panels_add_content_link', array(
                      'renderer' => $vars['renderer'],
                      'region' => $vars['region'],
                      'stock_content_page' => $vars['stock_content_page'],
                      'content_type' => $content
                    )),
        );
      }

      // sort category titles for the stock content page links
      ksort($vars['stock_content_page_links']);

    }

  }

  // Now render the top level buttons (aka the root category) if any.
  $vars['root_content'] = '';
  if (!empty($vars['categories']['root'])) {
    // Sort the content alphabetically.
    ksort($vars['categories']['root']['content']);
    foreach ($vars['categories']['root']['content'] as $content_type) {
      $vars['root_content'] .= theme('panels_add_content_link', array('renderer' => $vars['renderer'], 'region' => $vars['region'], 'content_type' => $content_type));
    }
  }
}

/**
 * Preprocess panels_add_content_modal() to...
 *
 * 1. Change the title for the 'Blocks' category.
 * 2. Remove any categories that the user doesn't have access to or...
 * 3. Reorder the display of the categories
 *
 */
function gsb_fpp_customization_preprocess_panels_add_content_modal(&$vars) {

  drupal_add_library('gsb_fpp_customization', 'gsb_fpp_customization');

  // change the title of the "Blocks" category
  _gsb_fpp_customization_retitle_blocks_category($vars);

  // remove any categories where the user doesn't have access or...
  // ones we don't want displayed
  _gsb_fpp_customization_remove_categories($vars);

  // reorder categories
  _gsb_fpp_customization_reorder_categories($vars);

  // add panels home category
  _gsb_fpp_customization_add_panels_home_tab($vars);

}

/**
 * Preprocess the panels_ipe_toolbar to... add the
 * gsb_fpp_customization_ctools js file.
 *
 * This js file will be used to hide the layout category selector.
 * By doing this we will limit authors to only use the 'GSB' page
 * layouts.
 * 
 */
function gsb_fpp_customization_preprocess_panels_ipe_toolbar(&$vars) {

  // Add the gsb_fpp_customization_ctools.js file if there is a 'Change Layout' button
  
  if (isset($vars['buttons'])) {
    $keys = _gsb_fpp_customization_recursive_keys($vars['buttons']);
    if (in_array('panels-ipe-change-layout', $keys, true)) {
      ctools_add_js('gsb_fpp_customization_ctools', 'gsb_fpp_customization');
    }
  }

}

/**
 * This function will retitle the 'blocks' vertical tab in the IPE Panels
 * Add Content modal popup to be... 'Preformatted CTA'.
 *
 */
function _gsb_fpp_customization_retitle_blocks_category(&$vars) {

  // change the title of the "Blocks" category to be more specific to the
  // CTA content that in this category

  if ($vars['categories']['blocks']['title']) {
    $vars['categories']['blocks']['title'] = 'Preformatted CTA';
    $url = $vars['renderer']->get_url('select-content', $vars['region'], 'blocks');
    $text_button = ctools_ajax_text_button('Preformatted CTA', $url, '', 'panels-modal-add-category');
    $index = 0;
    foreach($vars['categories'] as $key => $value) {
      if ($key == 'blocks') {
        break;
      }
      $index++;
    }
    $vars['categories_array'][$index] = $text_button;
  }

}

/**
 * This function will remove some of the categories displayed as
 * vertical tabs in the IPE Panels Add Content modal popup.
 *
 * Any categories (which relate back to workbench sections) that the
 * user doesn't have access to - will be removed.
 * 
 */
function _gsb_fpp_customization_remove_categories(&$vars) {

  global $user;

  if ($user->uid == 1) {
    return;
  }

  // get the user's access

  workbench_access_user_load_data($user);

  $active = workbench_access_get_active_tree();
  $active_category_ids = array_keys($active['tree']);

  $workbench_access = $user->workbench_access;

  // find the categories that are not accessable to the user ...

  $remove_items = array();

  foreach ($active_category_ids as $key => $value) {
    if (!isset($workbench_access[$value])) {
      $remove_items[] = $active['tree'][$value]['name'];
    }
  }

  // allow each module remove categories
  drupal_alter('gsb_fpp_customization_remove_category', $remove_items);

  // ... also add in some other categories we just want to remove

  $other_items = array('display-suite', 'gsb-panes', 'entity', 'node', 'view-panes', 'menu');
  $remove_items = array_merge($remove_items, $other_items);

  // changed remove_items to be lowercase for later comparision
  foreach($remove_items as $key => $value) {
    $value = strtolower($value);
    $value = str_replace(' ', '-', $value);
    $remove_items[$key] = $value;
  }

  // ... and remove them from the list that is displayed

  $index = 0;
  foreach($vars['categories'] as $key => $value) {
    if ($key == 'root') {
      continue;
    }
    if (in_array($key, $remove_items)) {
      unset($vars['categories_array'][$index]);
      unset($vars['categories'][$key]);
    }
    $index++;
  }

  // after yanking items out of the categories_array be need to
  // rekey the categories_array to be 0, 1, 2...
  $vars['categories_array'] = array_values($vars['categories_array']);

}

/**
 * This function will reorders some of the categories displayed as
 * vertical tabs in the IPE Panels Add Content modal popup.
 *
 * Categories will be displayed in the following order:
 *
 *   'blocks' ('Preformatted CTA')
 *   'content-panes' ('Content Panes')
 *   'other' ('Other')
 *   and <any sections including a tab for 'Stock Content'>
 *
 */
function _gsb_fpp_customization_reorder_categories(&$vars) {

  global $user;

  $category_keys = array_keys($vars['categories']);

  // remove 'root' from the list of category keys
  foreach($category_keys as $key => $value) {
    if ($value == 'root') {
      unset($category_keys[$key]);
      break;
    }
  }

  // after yanking items out of the $category_keys be need to
  // rekey the $category_keys to be 0, 1, 2...
  $category_keys = array_values($category_keys);

  // reorder the display of the categories_array to follow this order:
  // 'blocks', 'content-panes', 'other' and <any sections>
  $order_items = array(
    'customizable-content-lists' => array_search('customizable-content-lists', $category_keys),
    'non-customizable-content-lists' => array_search('non-customizable-content-lists', $category_keys),
    'menus' => array_search('menus', $category_keys),
    'stock-content' => array_search('stock-content', $category_keys),
    'custom-content---features' => array_search('custom-content---features', $category_keys),
    'views' => array_search('views', $category_keys),
    'administrator-blocks' => array_search('administrator-blocks', $category_keys),
    'administrators' => array_search('administrators', $category_keys),
    'blocks' => array_search('blocks', $category_keys),
    'custom-blocks' => array_search('custom-blocks', $category_keys),
  );

  // find any categories that are left
  $diff_keys = array_diff_key($vars['categories'], $order_items);

  // remove categories and set show them for specific role
  unset($diff_keys['other']);
  unset($diff_keys['content-panes']);

  if (!in_array('administrator', array_values($user->roles))
    && !in_array('marketing_admin', array_values($user->roles))
    && !in_array('section manager', array_values($user->roles))) {
    unset($order_items['customizable-content-lists']);
    unset($order_items['non-customizable-content-lists']);
    unset($order_items['menus']);
    unset($order_items['stock-content']);
    unset($order_items['custom-content---features']);
    unset($order_items['views']);
    unset($order_items['administrator-blocks']);
    unset($order_items['administrators']);
    unset($vars['root_content']);
  }

  if (in_array('section manager', array_values($user->roles))) {
    unset($order_items['non-customizable-content-lists']);
    unset($order_items['views']);
  }

  if (in_array('Marketing:12396', array_values($user->roles))) {
    unset($order_items['blocks']);
    unset($order_items['custom-blocks']);
    $order_items['views'] = array_search('views', $category_keys);
  }

  // and now what remains in diff should be the section categories
  foreach($diff_keys as $key => $value) {
    $order_items[$key] = array_search($key, $category_keys);
  }

  // now grab up the categories in the desired order
  $neworder_categories_array = array();
  $neworder_categories = array();
  foreach($order_items as $key => $value) {
    $neworder_categories_array[] = $vars['categories_array'][$value];
    $neworder_categories[$key] = $vars['categories'][$key];
  }

  $vars['categories_array'] = $neworder_categories_array;
  $vars['categories'] = $neworder_categories;

}

/**
 * This function will add a 'Panels Home' vertical tab
 * in the IPE Panels Add Content modal popup.
 *
 * This tab shows a page of quick links to all of the
 * content that can be added as a pane in our panelized
 * content.
 *
 */
function _gsb_fpp_customization_add_panels_home_tab(&$vars) {

  $active_class = '';
  if ($vars['category'] == null || $vars['category'] == 'root') {
    $active_class = ' active ';
  }

  $url = $vars['renderer']->get_url('select-content', $vars['region']);
  $text_button = ctools_ajax_text_button('Panels Home', $url, '', 'panels-modal-add-category' . $active_class);

  array_unshift($vars['categories_array'], $text_button);

}

/**
 * Recursively get list of all the keys in an array
 */
function _gsb_fpp_customization_recursive_keys($input) {
  $output = array_keys($input);
  foreach($input as $sub){
    if(is_array($sub)){
      $output = array_merge($output, _gsb_fpp_customization_recursive_keys($sub));
    }
  }
  return $output;
}

/**
 * Get a FPP Entity by UUID
 */
function _gsb_fpp_customization_get_fpp_entity_by_uuid($uuid) {

  if (empty($uuid)) {
    return null;
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'fieldable_panels_pane');
  $query->propertyCondition('uuid', $uuid);

  try {
    $result = $query->execute();
  }
  catch (EntityFieldQueryException $exception) {
    //$message = $exception->getMessage();
    return null;
  }

  if ($result == null || !isset($result['fieldable_panels_pane'])) {
    return null;
  }

  $fpp = reset($result['fieldable_panels_pane']);
  $fpp_entity = fieldable_panels_panes_load($fpp->fpid);

  return $fpp_entity;

}

/**
 * Convert bundle name to title
 */
function _gsb_fpp_customization_get_title_by_bundle_name($bundle_name) {

  $bundle_name_lookup = array(
    'accordion' => 'Accordion',
    'cta' => 'CTA',
    'diptych' => 'Diptych',
    'existing_node' => 'Existing Node',
    'featured_person' => 'Featured Person',
    'house_ads' => 'House Ads',
    'image_cta' => 'Image CTA',
    'links' => 'Links',
    'people' => 'People',
    'quote' => 'Quote',
    'slideshow' => 'Slideshow',
    'social_feed' => 'Social Feed',
    'spotlight' => 'Spotlight',
    'text' => 'Text',
    'video' => 'Video',
  );

  return $bundle_name_lookup[$bundle_name]; 
}

/**
 * Implements hook_panels_ipe_pane_links_alter().
 *
 * This hook will remove the 'gear' and/or 'trash can' buttons
 * at the top of each pane in the panels ipe, if the user
 * doesn't have access to take these actions for the specific
 * content pane.
 * 
 */
function gsb_fpp_customization_panels_ipe_pane_links_alter(&$links, $context) {
  
  // if the user has access to edit and delete 'image_cta' then...
  // there is nothing more to do.

  $can_edit = user_access('edit fieldable image_cta');
  $can_delete = user_access('delete fieldable image_cta');

  if ($can_edit && $can_delete) {
    return;
  }  

  $pane_id = $context['pane']->pid;
  
  $type = $context['display']->content[$pane_id]->type;
  $subtype = $context['display']->content[$pane_id]->subtype;

  // if the pane isn't a fpp then...
  // there is nothing more to do.

  if ($type != 'fieldable_panels_pane') {
    return;
  }

  // get the uuid of the item
  // the subtype should look something like this... 'uuid:bf7f85ab-ebdf-4f77-9782-25bf0eda19ad'
  list($part1, $uuid) = explode(":", $subtype);
  
  // get the fpp entity
  $entity = _gsb_fpp_stock_content_get_fpp_entity_by_uuid($uuid);

  // first check if we are considering a delete link
  if (!$can_delete && isset($links['delete'])) {
    if ($entity != null && $links['delete']['attributes']['id'] == 'pane-delete-panel-pane-' . $pane_id) {
      if ($entity->bundle == 'image_cta') {
        unset($links['delete']);
      }
    }
  }  

  // next check if we are considering a edit link
  if (!$can_edit && isset($links['edit'])) {
    if ($entity->bundle == 'image_cta') {
      unset($links['edit']);
    }
  }    

} 
